'use strict';

const logger = require('loggy');
const fs = require('fs');
const sysPath = require('path');

class BrunchReplacer {
  constructor(config) {
    this.config = config.plugins.replacer || {};
    if (!this.config.dict) this.config.dict = []

    logger.info('Replacer dictionary has ' + this.config.dict.length + ' entries');
  }

  onCompile(changedFiles) {

  }

  onCompile(args) {
    let data;

    for (const fileItem of this.config.dict) {
      let path = sysPath.join(__dirname, '..', '..', fileItem.path);
      
      data = fs.readFile(path, 'utf8', function (err, data) {
      	let stringData = data.toString();
      	for (const item of fileItem.items) {
      	  let regex = new RegExp(item.key, 'g');
          stringData = stringData.replace(regex, item.value);
        }

        fs.writeFile(path, stringData, 'utf8', function(err) {
          if (err) {
            return Promise.reject('Error while writing file with replacements' + err);
          }

          logger.info('File with replacements written.');
        });
      });
    }
  }
}

BrunchReplacer.prototype.brunchPlugin = true;
BrunchReplacer.prototype.type = 'javascript';
BrunchReplacer.prototype.defaultEnv = '*';

module.exports = BrunchReplacer;